const Task = require("../models/Task");
const Allocation = require("../models/TutorAllocation");

// ‚úÖ T·∫°o task (ch·ªâ tutor)
exports.createTask = async (req, res) => {
  const { studentId, title, description } = req.body;
  const tutorId = req.user.id;

  try {
    const allocation = await Allocation.findOne({
      tutor: tutorId,
      student: studentId,
      status: "active",
    });

    if (!allocation) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p t·∫°o task cho student n√†y." });
    }

    const filePath = req.file ? "/uploads/tasks/" + req.file.filename : "";

    const task = new Task({
      tutorId,
      studentId,
      title,
      description,
      filePath,
    });

    const savedTask = await task.save();
    res.status(201).json(savedTask);
  } catch (err) {
    console.error("L·ªói t·∫°o task:", err);
    res.status(500).json({ message: "L·ªói server khi t·∫°o task." });
  }
};

// ‚úÖ L·∫•y danh s√°ch task theo role
exports.getTasks = async (req, res) => {
  const userId = req.user.id;
  const role = req.user.role;

  try {
    let tasksQuery;
    if (role === "tutor") {
      tasksQuery = { tutorId: userId };
    } else if (role === "student") {
      tasksQuery = { studentId: userId };
    } else {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p." });
    }

    const tasks = await Task.find(tasksQuery)
      .populate("studentId", "fullName email")
      .populate("tutorId", "fullName email")
      .lean();

    res.status(200).json(tasks);
  } catch (err) {
    console.error("L·ªói l·∫•y danh s√°ch task:", err);
    res.status(500).json({ message: "L·ªói server khi l·∫•y danh s√°ch task." });
  }
};

// ‚úÖ N·ªôp b√†i (ch·ªâ student)
exports.submitTask = async (req, res) => {
  const studentId = req.user.id;
  const { taskId } = req.params;

  try {
    const task = await Task.findById(taskId);
    if (!task || task.studentId.toString() !== studentId) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn n·ªôp b√†i cho task n√†y." });
    }

    const submissionPath = req.file ? "/uploads/tasks/" + req.file.filename : "";
    if (!submissionPath) {
      return res.status(400).json({ message: "Kh√¥ng c√≥ file n·ªôp." });
    }

    task.submission = {
      filePath: submissionPath,
      submittedAt: new Date(),
    };

    await task.save();
    res.status(200).json({ message: "N·ªôp b√†i th√†nh c√¥ng.", task });
  } catch (err) {
    console.error("L·ªói n·ªôp b√†i:", err);
    res.status(500).json({ message: "L·ªói server khi n·ªôp b√†i." });
  }
};

// ‚úÖ B√¨nh lu·∫≠n (tutor v√† student)
exports.addComment = async (req, res) => {
  const userId = req.user.id;
  const userRole = req.user.role; // üëà L·∫•y role t·ª´ token
  const { taskId } = req.params;
  const { text } = req.body;

  try {
    const task = await Task.findById(taskId);
    if (!task) {
      return res.status(404).json({ message: "Task kh√¥ng t·ªìn t·∫°i." });
    }

    task.comments.push({
      userId,
      userRole, // üëà Ghi r√µ role ·ªü m·ªói comment
      text,
      createdAt: new Date(),
    });

    await task.save();
    res.status(201).json(task.comments);
  } catch (err) {
    console.error("L·ªói b√¨nh lu·∫≠n:", err);
    res.status(500).json({ message: "L·ªói server khi th√™m b√¨nh lu·∫≠n." });
  }
};

// ‚úÖ L·∫•y danh s√°ch h·ªçc sinh ƒë∆∞·ª£c ph√¢n b·ªï cho tutor
exports.getAllocatedStudents = async (req, res) => {
  const tutorId = req.user.id;
  try {
    const allocations = await Allocation.find({ tutor: tutorId, status: "active" })
      .populate("student", "fullName email");

    const students = allocations.map((a) => a.student);
    res.status(200).json({ students });
  } catch (err) {
    console.error("L·ªói l·∫•y danh s√°ch h·ªçc sinh:", err);
    res.status(500).json({ message: "L·ªói server khi l·∫•y danh s√°ch h·ªçc sinh." });
  }
};
  